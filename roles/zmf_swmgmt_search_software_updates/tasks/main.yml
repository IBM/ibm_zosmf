# Copyright (c) IBM Corporation 2024
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

---
# Tasks file for zmf_swmgmt_search_software_updates play.

# Do not attempt to execute the play without a software instance or UUID.
- name: A software instance and system nickname or a UUID must be provided to the role
  ansible.builtin.fail:
    msg: "Specify a software instance and system nickname or a UUID and retry the role."
  when: >
    (software_instance_uuid is not defined or software_instance_uuid == '') and (software_instance_name is not defined or software_instance_name == ''
    or system_nickname is not defined or system_nickname == '')

# Create a variable for the software update search response content.
- name: Initialize the container for the software update search response content when a SWI is specified.
  ansible.builtin.set_fact:
    search_software_updates_swi_response: ""
  when: software_instance_uuid is not defined

# Create a variable for the software update search response content.
- name: Initialize the container for the software update search response content when a UUID is specifed.
  ansible.builtin.set_fact:
    search_software_updates_uuid_response: ""
  when: software_instance_uuid is defined

# Issue a failure message and stop the playbook if no updates were specified.
- name: Display the software update search action failure information if no updates were specified
  ansible.builtin.fail:
    msg: "One or more software updates must be specified for the search.  Specify one or more updates and try again."
  when: updates is not defined

# Add updates to JSON request body.
- name: "Including updates in the request content body"
  ansible.builtin.set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}'

# Add zosmfuid to the JSON request body if specified.
- name: "Adding zosmfuid in the request content body"
  ansible.builtin.set_fact:
    software_update_search_request_body: '{{ software_update_search_request_body }},"zosmfuid": "{{ remote_zmf_user }}"'
  when: remote_zmf_user is defined

# Add zosmfpw to the JSON request body if specified.
- name: "Adding zosmfpw in the request content body"
  ansible.builtin.set_fact:
    software_update_search_request_body: '{{ software_update_search_request_body }},"zosmfpw": "{{ remote_zmf_password }}"'
  when: remote_zmf_password is defined

# Add proxyuid to the JSON request body if specified.
- name: "Adding proxyuid in the request content body"
  ansible.builtin.set_fact:
    software_update_search_request_body: '{{ software_update_search_request_body }},"proxyuid": "{{ proxy_zmf_user }}"'
  when: proxy_zmf_user is defined

# Add proxypw to the JSON request body if specified.
- name: "Adding proxypw in the request content body"
  ansible.builtin.set_fact:
    software_update_search_request_body: '{{ software_update_search_request_body }},"proxypw": "{{ proxy_zmf_password }}"'
  when: proxy_zmf_password is defined

# Add the ending curly brace around the request content JSON.
- name: "Adding ending curly brace for the JSON request content body"
  ansible.builtin.set_fact:
    software_update_search_request_body: '{{ software_update_search_request_body }}}'

# Ensure there is a colon in the host. Add the z/OSMF server port if specified.
- name: "Set the zmf_port if specified"
  ansible.builtin.set_fact:
    zmf_host: '{{ zmf_host }}:{{ zmf_port }}'
  when: zmf_port is defined and ':' not in zmf_host

########################################################################################
# URI MODULE #1: Start a software update search async request for a software instance. #
########################################################################################

# If a SWI was specified call the SWI REST API URI.
- name: Software Instance Software Update Search
  when: software_instance_uuid is not defined
  block:
    # Start the software update search asynchronous operation.
    - name: "Searching software instance <{{ software_instance_name }}> for software updates"
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}/zosmf/swmgmt/swi/{{ system_nickname }}/{{ software_instance_name }}/softwareupdatesearch"
        return_content: true
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        method: POST
        status_code: 202, 400, 403, 404, 409, 500, 503
        validate_certs: false
        body_format: json
        body: "{{ software_update_search_request_body }}"
      delegate_to: localhost
      register: search_software_updates_swi_response

    # Create a variable for the software update search status monitor URL.
    - name: Set the software update search status monitor URL
      ansible.builtin.set_fact:
        software_update_search_status_monitor_url: "{{ search_software_updates_swi_response.json['statusurl'] }}"
      when: search_software_updates_swi_response.status == 202

    # Issue a failure message when user does not have the APAR with the report APIs installed on their system.
    - name: Display Software Update Search REST API failure information
      ansible.builtin.fail:
        msg: "There was an error encountered during Software Update Search REST API execution. It's possible the host
        system is missing required APAR PH47050 which contains the software instance report REST APIs. Otherwise the
        specified software instance was not found. These are the failure
        details: {{ search_software_updates_swi_response.json }}"
      when: search_software_updates_swi_response.status == 404 and search_software_updates_swi_response.json is defined

    # Issue a failure message when user does not have the APAR with the report APIs installed on their system.
    - name: Display Software Update Search REST API failure information
      ansible.builtin.fail:
        msg: "There was an error encountered during Software Update Search REST API execution. It's possible the host
        system is missing required APAR PH47050 which contains the software instance report REST APIs. Otherwise the
        specified software instance was not found. These are the failure
        details: {{ search_software_updates_swi_response }}"
      when: search_software_updates_swi_response.status == 404

    # Issue a failure message when user does not have the appropriate authority.
    - name: The user does not have the appropriate authority to complete this request
      ansible.builtin.fail:
        msg: "Missing Critical Updates failure details: {{ search_software_updates_swi_response.json }} "
      when: search_software_updates_swi_response.status == 403 and search_software_updates_swi_response.json is defined

    # Issue a failure message and stop the playbook.
    - name: Display the software update search action failure information
      ansible.builtin.fail:
        msg: "Software Update Search failure details: {{ search_software_updates_swi_response.json }} "
      when: search_software_updates_swi_response.status != 202 and search_software_updates_swi_response.json is defined

    # Issue a failure message and stop the playbook.
    - name: Display the software update search action failure information
      ansible.builtin.fail:
        msg: "Software Update Search failure details: {{ search_software_updates_swi_response }} "
      when: search_software_updates_swi_response.status != 202

# If a UUID was specified call the UUID REST API URI.
- name: Software Instance UUID Software Update Search
  when: software_instance_uuid is defined
  block:
    # Start the software update search asynchronous operation.
    - name: "Searching software instance with UUID <{{ software_instance_uuid }}> for software updates"
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}/zosmf/swmgmt/swi/{{ software_instance_uuid }}/softwareupdatesearch"
        return_content: true
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        method: POST
        status_code: 202, 400, 403, 404, 409, 500, 503
        validate_certs: false
        body_format: json
        body: "{{ software_update_search_request_body }}"
      delegate_to: localhost
      register: search_software_updates_uuid_response

    # Create a variable for the software update search status monitor URL.
    - name: Set the software update search status monitor URL
      ansible.builtin.set_fact:
        software_update_search_status_monitor_url: "{{ search_software_updates_uuid_response.json['statusurl'] }}"
      when: search_software_updates_uuid_response.status == 202

    # Issue a failure message when user does not have the APAR with the report APIs installed on their system.
    - name: Display Software Update Search REST API failure information
      ansible.builtin.fail:
        msg: "There was an error encountered during Software Update Search REST API execution. It's possible the host
        system is missing required APAR PH49464 which contains the software instance report REST APIs. Otherwise the
        specified software instance was not found. These are the failure
        details: {{ search_software_updates_uuid_response.json }}"
      when: search_software_updates_uuid_response.status == 404 and search_software_updates_uuid_response.json is defined

    # Issue a failure message when user does not have the APAR with the report APIs installed on their system.
    - name: Display Software Update Search REST API failure information
      ansible.builtin.fail:
        msg: "There was an error encountered during Software Update Search REST API execution. It's possible the host
        system is missing required APAR PH49464 which contains the software instance report REST APIs. Otherwise the
        specified software instance was not found. These are the failure
        details: {{ search_software_updates_uuid_response }}"
      when: search_software_updates_uuid_response.status == 404

    # Issue a failure message when user does not have the appropriate authority.
    - name: The user does not have the appropriate authority to complete this request
      ansible.builtin.fail:
        msg: "Missing Critical Updates failure details: {{ search_software_updates_uuid_response.json }} "
      when: search_software_updates_uuid_response.status == 403 and search_software_updates_uuid_response.json is defined

    # Issue a failure message and stop the playbook.
    - name: Display the software update search action failure information
      ansible.builtin.fail:
        msg: "Software Update Search failure details: {{ search_software_updates_uuid_response.json }} "
      when: search_software_updates_uuid_response.status != 202 and search_software_updates_uuid_response.json is defined

    # Issue a failure message and stop the playbook.
    - name: Display the software update search action failure information
      ansible.builtin.fail:
        msg: "Software Update Search failure details: {{ search_software_updates_uuid_response }} "
      when: search_software_updates_uuid_response.status != 202

################################################################################
# URI MODULE #2: Check the status of the software update search async request. #
################################################################################

# Wait for the asynchronous thread to finish and return a response.
- name: "Poll the status monitor URL of the software update search operation every {{ async_thread_check_delay }}
second(s) until it is finished or maximum {{ async_thread_check_times }} poll(s) reached"
  ansible.builtin.uri:
    url: "{{ software_update_search_status_monitor_url }}"
    method: GET
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    status_code: 200
    validate_certs: false
    return_content: true
  register: search_software_updates_response
  delegate_to: localhost
  # This task's URL will be called repeatedly either until the "until" condition is met (request failed or
  # request completed) or the request still isn't finished after the specified "complete_check_times" attempts.
  until: (search_software_updates_response is failed) or (search_software_updates_response.json['status'] == 'complete')
  retries: "{{ async_thread_check_times }}"
  delay: "{{ async_thread_check_delay }}"

# Save the software update search operation's response in a file.
- name: Write the results for the software update search operation to a JSON file
  block:
    # Perform the copy of the software update search response to the file.
    - name: "Copy the software update search results to JSON file <{{ search_software_updates_response_file }}>"
      ansible.builtin.copy:
        content: '{{ search_software_updates_response.json | default("") | to_nice_json(indent=2) }}'
        dest: '{{ search_software_updates_response_file }}'
        mode: '0644'
      delegate_to: localhost

    # Save the response content into a local variable.
    - name: Create a variable to hold the value of the software update search results
      ansible.builtin.set_fact:
        search_software_updates_response_json: "{{ search_software_updates_response.json }}"

# Show the path to the software update search REST API results file.
- name: Display the path to the file containing the results from the software update search operation
  ansible.builtin.debug:
    msg: "Output filename= {{ search_software_updates_response_file }}"
