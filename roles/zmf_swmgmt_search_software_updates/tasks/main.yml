# Copyright (c) IBM Corporation 2023
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

---
# Tasks file for zmf_swmgmt_search_software_updates play.

# Create a variable for the software update search response content.
- name: Initialize the container for the software update search response content
  set_fact:
    search_software_updates_response: ""

# Issue a failure message and stop the playbook if no updates were specified.
- name: Display the software update search action failure information if no updates were specified
  fail:
    msg: "One or more software updates must be specified for the search.  Specify one or more updates and try again."
  when: updates is not defined

- name: "Including updates and zosmfuid in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfuid":"{{ remote_zmf_user }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is not defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Including updates, zosmfuid and zosmfpw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Including updates, zosmfuid and proxyuid in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfuid":"{{ remote_zmf_user }}",
 "proxyuid":"{{ proxy_zmf_user }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is not defined and proxy_zmf_user is defined and proxy_zmf_password is not defined

- name: "Including updates, zosmfuid and proxypw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfuid":"{{ remote_zmf_user }}",
 "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is not defined and proxy_zmf_user is not defined and proxy_zmf_password is defined

- name: "Including updates, zosmfuid, zosmfpw, and proxyuid in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}", "proxyuid":"{{ proxy_zmf_user }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is defined and proxy_zmf_password is not defined

- name: "Including updates, zosmfuid, zosmfpw, and proxypw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}", "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is not defined and proxy_zmf_password is defined

- name: "Including updates and zosmfpw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfpw":"{{ remote_zmf_password }}"}'
  when: remote_zmf_password is defined and remote_zmf_user is not defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Including updates, zosmfpw, and proxyuid in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfpw":"{{ remote_zmf_password }}",
  "proxyuid":"{{ proxy_zmf_user }}"}'
  when: remote_zmf_user is not defined and remote_zmf_password is defined and proxy_zmf_user is defined and proxy_zmf_password is not defined

- name: "Including updates, zosmfpw and proxypw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }},
 "zosmfpw":"{{ remote_zmf_password }}", "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is not defined and remote_zmf_password is defined and proxy_zmf_user is not defined and proxy_zmf_password is defined

- name: "Including updates and proxyuid in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "proxyuid":"{{ proxy_zmf_user }}"}'
  when: proxy_zmf_user is defined and remote_zmf_user is not defined and remote_zmf_password is not defined and proxy_zmf_password is not defined

- name: "Including updates, proxyuid and proxypw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "proxyuid":"{{ proxy_zmf_user }}",
  "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is not defined and remote_zmf_password is not defined and proxy_zmf_user is defined and proxy_zmf_password is defined

- name: "Including updates and proxypw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "proxypw":"{{ proxy_zmf_password }}"}'
  when: proxy_zmf_password is defined and proxy_zmf_user is not defined and remote_zmf_user is not defined and remote_zmf_password is not defined

- name: "Including updates, zosmfuid, zosmfpw, proxyuid, and proxypw in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}, "zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}", "proxyuid":"{{ proxy_zmf_user }}", "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is defined and proxy_zmf_password is defined

- name: "Including updates in the request content body"
  set_fact:
    software_update_search_request_body: '{"updates": {{ updates }}}'
  when: remote_zmf_user is not defined and remote_zmf_password is not defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Set the zmf_port if specified"
  set_fact:
    zmf_host: '{{ zmf_host }}:{{ zmf_port }}'
  when: zmf_port is defined and ':' not in zmf_host

########################################################################################
# URI MODULE #1: Start a software update search async request for a software instance. #
########################################################################################

# Start the software update search asynchronous operation.
- name: "Searching software instance <{{ software_instance_name }}> for software updates"
  uri:
    url: "https://{{ zmf_host }}/zosmf/swmgmt/swi/{{ system_nickname }}/{{ software_instance_name }}/softwareupdatesearch"
    return_content: true
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    method: POST
    status_code: 202, 404
    validate_certs: false
    body_format: json
    body: "{{ software_update_search_request_body }}"
  delegate_to: localhost
  register: search_software_updates_response

# Save the software update search operation's response in a file or return the operation's failure information.
- name: Write the results for the software update search operation to a JSON file
  block:
    # Create a variable for the software update search status monitor URL.
    - name: Set the software update search status monitor URL
      set_fact:
        software_update_search_status_monitor_url: "{{ search_software_updates_response.json['statusurl'] }}"
      when: search_software_updates_response.status == 202

    # Issue a failure message when user does not have the APAR with the report APIs installed on their system.
    - name: Display Software Update Search REST API failure information
      fail:
        msg: "There was an error encountered during Software Update Search REST API execution. Its possible the host
        system is missing required APAR PH47050 which contains the software instance report REST APIs. Otherwise the
        specified software instance was not found. These are the failure
        details: {{ search_software_updates_response.json }}"
      when: search_software_updates_response.status == 404

    # Issue a failure message and stop the playbook.
    - name: Display the software update search action failure information
      fail:
        msg: "Software Update Search failure details: {{ search_software_updates_response }} "
      when: search_software_updates_response.status != 202

################################################################################
# URI MODULE #2: Check the status of the software update search async request. #
################################################################################

# Wait for the asynchronous thread to finish and return a response.
- name: "Poll the status monitor URL of the software update search operation every {{ async_thread_check_delay }}
second(s) until it is finished or maximum {{ async_thread_check_times }} poll(s) reached"
  uri:
    url: "{{ software_update_search_status_monitor_url }}"
    method: GET
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    status_code: 200
    validate_certs: false
    return_content: true
  register: search_software_updates_response
  delegate_to: localhost
  # This task's URL will be called repeatedly either until the "until" condition is met (request failed or
  # request completed) or the request still isn't finished after the specified "complete_check_times" attempts.
  until: (search_software_updates_response is failed) or (search_software_updates_response.json['status'] == 'complete')
  retries: "{{ async_thread_check_times }}"
  delay: "{{ async_thread_check_delay }}"

# Save the software update search operation's response in a file.
- name: Write the results for the software update search operation to a JSON file
  block:
    # Perform the copy of the software update search response to the file.
    - name: "Copy the software update search results to JSON file <{{ search_software_updates_response_file }}>"
      copy:
        content: '{{ search_software_updates_response.json | default("") | to_nice_json(indent=2) }}'
        dest: '{{ search_software_updates_response_file }}'
        mode: '0644'
      delegate_to: localhost

    # Save the response content into a local variable.
    - name: Create a variable to hold the value of the software update search results
      set_fact:
        search_software_updates_response_json: "{{ search_software_updates_response.json }}"

# Show the path to the software update search REST API results file.
- name: Display the path to the file containing the results from the software update search operation
  debug:
    msg: "Output filename= {{ search_software_updates_response_file }}"
