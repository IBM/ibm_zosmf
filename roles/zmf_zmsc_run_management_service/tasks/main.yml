# Copyright (c) IBM Corporation 2023
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

---
# tasks file for zmf_zmsc_run_management_service

- name: Instance record directory
  ansible.builtin.include_tasks: instance_dir_util.yml
  run_once: true

# This role performs following tasks :
# Call REST API to get object ID of service using service name
# Call REST API to create the service instance using service object ID
# Call REST API to submit service instance using service instance object ID
# Determine service instance status using loop_service_state_check
# Write service instance data to a file

# Support input_vars to be provided via playbook.
# If input_vars isn't set then set default below
- name: Set input_vars as fact
  ansible.builtin.set_fact:
    input_vars: {null}
  when: input_vars is not defined

# Make sure that required inputs are provided

- name: Set category_name as fact
  ansible.builtin.set_fact:
    category_name: ""
  when: category_name is not defined

- name: Validate that category_name is provided
  ansible.builtin.fail:
    msg: "Category name is required"
  when: not category_name

- name: Set catalog_service_name as fact
  ansible.builtin.set_fact:
    catalog_service_name: ""
  when: catalog_service_name is not defined

- name: Validate that catalog_service_name is provided
  ansible.builtin.fail:
    msg: "Service name is required"
  when: not catalog_service_name

# Support change_record_number as optional input
- name: Set change_record_number as fact
  ansible.builtin.set_fact:
    change_record_number: null
  when: change_record_number is not defined

# Support system_name as optional input
- name: Set system_name as fact
  ansible.builtin.set_fact:
    system_name: null
  when: system_name is not defined

# Support job_statement as optional input
- name: Set job_statement as fact
  ansible.builtin.set_fact:
    job_statement: null
  when: job_statement is not defined

# Obtain service object ID using service name and category name
- name: Obtain Catalog Service Id
  ansible.builtin.uri:
    url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/mgmt-services/rest/\
         catalog-services?serviceName={{ catalog_service_name | urlencode }}\
         &categoryName={{ category_name | urlencode }}&summary=true"
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    method: GET
    status_code: "200"
    validate_certs: false
    return_content: true
    body_format: json
  register: service_summary
  delegate_to: localhost

# Set parameters for create service instance API.

- name: Set parameters for create service instance API
  block:
    - name: Set service object id
      ansible.builtin.set_fact:
        service_object_id: "{{ service_summary.json[0].objectId }}"

    # Build request body parameters for create service instance API

    - name: Set service_instance_create_body
      ansible.builtin.set_fact:
        service_instance_create_body: '{
          "siCatalogServiceId": "{{ service_object_id }}",
          "siInputs": {{ input_vars }},
          "siTargetSystem": "{{ system_name }}",
          "siJobStatement": "{{ job_statement }}",
          "siChangeRecord": "{{ change_record_number }}",
          "siRunAutomatically":true
          }'

- name: Create Management Service Instance
  ansible.builtin.uri:
    url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/mgmt-services/rest/service-instances"
    return_content: true
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    method: POST
    status_code: "201"
    validate_certs: false
    body_format: json
    body: "{{ service_instance_create_body }}"
  delegate_to: localhost
  register: create_service_instance_results

- name: Set service_instance_object_id as fact
  ansible.builtin.set_fact:
    service_instance_object_id: "{{ create_service_instance_results.json['objectId'] }}"

- name: Submit Management Service Instance
  ansible.builtin.uri:
    url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/mgmt-services/rest/service-instances/{{ service_instance_object_id }}/actions/submit"
    return_content: true
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    method: POST
    status_code: "200"
    validate_certs: false
    body_format: json
  delegate_to: localhost
  register: submitted_service_results

- name: Write submitted service instance information to disk
  ansible.builtin.copy:
    content: "{{ submitted_service_results.json | to_nice_json(indent=2) }}"
    dest: "{{ instance_record_dir }}/{{ inventory_hostname }}/{{ catalog_service_name }}-{{ submitted_service_results.json['objectId'] }}.json"
    mode: '0644'
  delegate_to: localhost

- name: Display instance record file path
  ansible.builtin.debug:
    msg: "Instance record saved at:\
         {{ instance_record_dir }}/{{ inventory_hostname }}/{{ catalog_service_name }}-{{ submitted_service_results.json['objectId'] }}.json"

##############################################################################
# Verify service instance status, requires the following variables:
# {{instance_object_id}} -> Service Instance Object ID
# {{zmf_host:zmf_port}} -> z/OSMF host uri
# {{max_retry}} -> max retry count before task exit with failing status
##############################################################################
- name: Monitor Service Instance Progress Section
  ansible.builtin.include_tasks: loop_service_state_check.yml
  vars:
    instance_object_id: "{{ service_instance_object_id }}"

- name: Set full_instance_json as fact
  ansible.builtin.set_fact:
    full_instance_json: ""

- name: Get completed service instance information
  ansible.builtin.uri:
    url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/mgmt-services/rest/service-instances/{{ service_instance_object_id }}"
    method: GET
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    status_code: "200"
    validate_certs: false
    return_content: true
  register: full_instance_json
  delegate_to: localhost

- name: Update service instance information after service instance completes
  block:
    - name: Update completed service instance information to local file
      ansible.builtin.copy:
        content: '{ "instance-info" : {{ full_instance_json.json | default("") | to_nice_json(indent=2) }}}'
        dest: "{{ instance_record_dir }}/{{ inventory_hostname }}/{{ catalog_service_name }}-{{ submitted_service_results.json['objectId'] }}.json"
        mode: '0644'
      delegate_to: localhost

    - name: Set variable for service instance json file path
      ansible.builtin.set_fact:
        zosmf_instance_info: "{{ full_instance_json.json }}"
        instance_info_json_path:
          "{{ instance_record_dir }}/{{ inventory_hostname }}/{{ catalog_service_name }}-{{ submitted_service_results.json['objectId'] }}.json"

- name: Display service instance record file path
  ansible.builtin.debug:
    msg: "Instance record saved at: \
       {{ instance_record_dir }}/{{ inventory_hostname }}/{{ catalog_service_name | urlencode }}-{{ submitted_service_results.json['objectId'] }}.json"
  run_once: true
